{"version":3,"sources":["firebase.js","VoteKnob.js","QuestionList.js","QuestionThread.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","VoteKnob","props","vote","e","delta","preventDefault","voteKey","interactedWith","dbRef","update","upvotes","className","onClick","disabled","QuestionList","onSubmit","questionSubmit","htmlFor","type","name","id","value","questionInput","onChange","inputChange","questionList","map","question","index","key","moved","href","questionSelect","text","database","ref","QuestionThread","exit","returnFunction","event","setState","answerInput","target","answerSubmit","state","newAnswer","answer","selectedQuestion","push","answers","answersSortedKeys","questionRef","this","on","snapshot","questionObj","val","answerRef","answerKey","sort","a","b","forEach","oldIndex","indexOf","console","log","off","React","Component","App","newQuestion","postDate","Date","now","selectQuestion","questionSortedKeys","questions","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAcAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,ECUeS,MAxBf,SAAkBC,GACd,IAAMC,EAAM,SAACC,EAAEC,GACXD,EAAEE,iBACIJ,EAAMK,WAAWL,EAAMM,iBACzBN,EAAMM,eAAeN,EAAMK,SAAS,GAExCL,EAAMM,eAAeN,EAAMK,UAAYF,EACvCH,EAAMO,MAAMC,OAAO,CACfC,QAAQT,EAAMS,QAAQN,KAG9B,OACI,yBAAKO,UAAU,YAEP,4BAAQC,QAAS,SAACT,GAAKD,EAAKC,EAAE,IAAKU,SAAWZ,EAAMM,eAAeN,EAAMK,UAAYL,EAAMM,eAAeN,EAAMK,UAAY,GAA5H,KAEJ,2BAAIL,EAAMS,SAEN,4BAAQE,QAAS,SAACT,GAAKD,EAAKC,GAAG,IAAKU,SAAWZ,EAAMM,eAAeN,EAAMK,UAAYL,EAAMM,eAAeN,EAAMK,WAAa,GAA9H,OCsCDQ,MAtDf,SAAsBb,GAClB,OACI,6BACI,0BACIU,UAAU,eACVI,SAAUd,EAAMe,gBAChB,2BAAOC,QAAQ,iBAAf,wBAGA,2BACIC,KAAK,OACLC,KAAK,gBACLC,GAAG,gBACHC,MAAOpB,EAAMqB,cACbC,SAAUtB,EAAMuB,cAEpB,4BAAQN,KAAK,UAAb,iBAIJ,wBAAIP,UAAU,gBACbV,EAAMwB,aAAaC,KAAI,SAACC,EAASC,GAC9B,OACA,wBAAIC,IAAKF,EAASE,IAAID,EAClBjB,UAAY,UAAWgB,EACtBA,EAASG,MAAM,EACZ,WACA,SACF,MAEF,uBACInB,UAAU,eAEV,uBACIoB,KAAK,IACLnB,QAAS,kBAAMX,EAAM+B,eAAeL,EAASE,OAE5CF,EAASM,OAGlB,kBAAC,EAAD,CACIzB,MAAOjB,EAAS2C,WAAWC,IAAIR,EAASE,KACxCnB,QAASiB,EAASjB,QAClBJ,QAASqB,EAASE,IAClBtB,eAAgBN,EAAMM,wBCiG/B6B,E,YA5IX,aAAe,IAAD,8BACV,+CA8DJC,KAAO,SAAClC,GACJA,EAAEE,iBACF,EAAKJ,MAAMqC,kBAjED,EAoEdd,YAAc,SAACe,GACX,EAAKC,SAAS,CACVC,YAAaF,EAAMG,OAAOrB,SAtEpB,EA0EdsB,aAAe,SAACJ,GAEZ,GADAA,EAAMlC,iBACyB,KAA3B,EAAKuC,MAAMH,YAAoB,CAC/B,IAAMI,EAAY,CACdC,OAAQ,EAAKF,MAAMH,YACnB/B,QAAS,GAEb,EAAK8B,SAAS,CACVC,YAAa,KAGElD,EAAS2C,WAAWC,IAApB,UAA2B,EAAKlC,MAAM8C,iBAAtC,aAERC,KAAKH,KArFpB,EAAKD,MAAQ,CACTjB,SAAU,GACVsB,QAAS,GACTC,kBAAmB,GACnBT,YAAa,GACbU,YAAa,IAPP,E,iFAWO,IAAD,OACVA,EAAc5D,EAAS2C,WAAWC,IAAIiB,KAAKnD,MAAM8C,kBACvDI,EAAYE,GAAG,SAAS,SAACC,GACrB,IAAMC,EAAcD,EAASE,MAEvBP,EAAQ,GACd,IAAK,IAAIH,KAAUS,EAAYN,QAE3BA,EAAQD,KAAK,CACTS,UAAUlE,EAAS2C,WAAWC,IAApB,UAA2B,EAAKlC,MAAM8C,iBAAtC,oBAAkED,IAC5EY,UAAWZ,EACXb,KAAKsB,EAAYN,QAAQH,GAAQA,OACjCpC,QAAQ6C,EAAYN,QAAQH,GAAQpC,UAI5CuC,EAAQU,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEnD,QAAUkD,EAAElD,WAEpC,IAAMwC,EAAoB,GAE1BD,EAAQa,SAAQ,SAAChB,EAAOlB,GACtBsB,EAAkBF,KAAKF,EAAOY,WAE9B,IAAMK,EAAW,EAAKnB,MAAMM,kBAAkBc,QAAQlB,EAAOY,WACzDK,GAAY,GAAKA,IAAanC,IAE9BkB,EAAOhB,MADLiC,EAAWnC,EACE,GAGC,MAKtBqC,QAAQC,IAAIjB,GAEZ,EAAKT,SAAS,CACVS,QAASA,EACTC,kBAAmBA,EACnBvB,SAAU4B,EAAY5B,cAI9ByB,KAAKZ,SAAS,CACVW,YAAaA,M,6CAKjBC,KAAKR,MAAMO,YAAYgB,IAAI,W,+BA+BrB,IAAD,OACL,OACI,6BACI,4BAAKf,KAAKR,MAAMjB,UAChB,wBAAIhB,UAAU,kBACTyC,KAAKR,MAAMK,QAAQvB,KAAI,SAACoB,EAAOlB,GAC5B,OACI,wBAAIC,IAAK,EAAK5B,MAAM8C,iBAAiBD,EAAOY,UAAU9B,EACtDjB,UAAY,UAAWmC,EAClBA,EAAOhB,MAAM,EACV,WACA,SACF,MAEF,uBAAGnB,UAAU,0BAA0BmC,EAAOb,MAC9C,kBAAC,EAAD,CACIzB,MAAOsC,EAAOW,UACd/C,QAASoC,EAAOpC,QAChBJ,QAAS,EAAKL,MAAM8C,iBAAiBD,EAAOY,UAC5CnD,eAAgB,EAAKN,MAAMM,sBAM/C,0BACII,UAAU,aACVI,SAAUqC,KAAKT,cACf,2BAAO1B,QAAQ,eAAf,uBACA,2BACIC,KAAK,OACLC,KAAK,cACLC,GAAG,cACHC,MAAO+B,KAAKR,MAAMH,YAClBlB,SAAU6B,KAAK5B,cAEnB,4BAAQN,KAAK,UAAb,mBAEJ,4BACIP,UAAU,eACVC,QAASwC,KAAKf,MAFlB,iC,GAlIa+B,IAAMC,WCiIpBC,E,YA9Hb,aAAe,IAAD,8BACZ,+CAwDF9C,YAAc,SAACe,GACb,EAAKC,SAAS,CACZlB,cAAeiB,EAAMG,OAAOrB,SA3DlB,EA+DdL,eAAiB,SAACuB,GAEhB,GADAA,EAAMlC,iBAC2B,KAA7B,EAAKuC,MAAMtB,cAAsB,CACnC,IAAMiD,EAAc,CAClB5C,SAAU,EAAKiB,MAAMtB,cACrBZ,QAAS,EACT8D,SAAUC,KAAKC,MACfzB,QAAS,IAEX,EAAKT,SAAS,CACZlB,cAAe,KAEjB,EAAKsB,MAAMpC,MAAMwC,KAAKuB,KA3EZ,EA+EdI,eAAiB,WAAc,IAAbvD,EAAY,uDAAT,KACnB,EAAKoB,SAAS,CACZO,iBAAkB3B,KA/EpB,EAAKwB,MAAQ,CACXnB,aAAc,GACdmD,mBAAoB,GACpBpE,MAAO,GACPc,cAAe,GACfyB,iBAAkB,KAClBxC,eAAgB,IARN,E,iFAYO,IAAD,OAEZC,EAAQjB,EAAS2C,WAAWC,MAClCiB,KAAKZ,SAAS,CACZhC,MAAOA,IAGTA,EAAM6C,GAAG,SAAS,SAACC,GACjB,IAAMuB,EAAYvB,EAASE,MAErB/B,EAAe,GACrB,IAAK,IAAII,KAAOgD,EACdpD,EAAauB,KAAK,CAChBnB,IAAKA,EACLI,KAAM4C,EAAUhD,GAAKF,SACrBjB,QAASmE,EAAUhD,GAAKnB,UAI5Be,EAAakC,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEnD,QAAUkD,EAAElD,WAEzC,IAAMkE,EAAqB,GAE3BnD,EAAaqC,SAAQ,SAACnC,EAASC,GAC7BgD,EAAmB5B,KAAKrB,EAASE,KAEjC,IAAMkC,EAAW,EAAKnB,MAAMgC,mBAAmBZ,QAAQrC,EAASE,KAC5DkC,GAAY,GAAKA,IAAanC,IAE9BD,EAASG,MADPiC,EAAWnC,EACI,GAGC,MAKxB,EAAKY,SAAS,CACZf,aAAcA,EACdmD,mBAAoBA,S,+BAmCxB,OACE,yBAAKjE,UAAU,OACb,gCACE,yBAAKA,UAAU,WACb,wDAGJ,yBAAKA,UAAU,WACb,0BAAMS,GAAG,QAEJgC,KAAKR,MAAMG,iBACV,kBAAC,EAAD,CACEA,iBAAkBK,KAAKR,MAAMG,iBAC7BT,eAAgBc,KAAKuB,eACrBpE,eAAgB6C,KAAKR,MAAMrC,iBAI7B,kBAAC,EAAD,CACEkB,aAAc2B,KAAKR,MAAMnB,aACzBD,YAAa4B,KAAK5B,YAClBR,eAAgBoC,KAAKpC,eACrBM,cAAe8B,KAAKR,MAAMtB,cAC1BU,eAAgBoB,KAAKuB,eACrBpE,eAAgB6C,KAAKR,MAAMrC,mBAMrC,gCACE,yBAAKI,UAAU,WACb,mE,GAvHMyD,IAAMC,WCMJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3cdb91d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDeDpcgUhIRq4pS05q_gcbCsimItUJHRr0\",\n    authDomain: \"lauren-overflow.firebaseapp.com\",\n    databaseURL: \"https://lauren-overflow.firebaseio.com\",\n    projectId: \"lauren-overflow\",\n    storageBucket: \"lauren-overflow.appspot.com\",\n    messagingSenderId: \"149714945568\",\n    appId: \"1:149714945568:web:ed5b8dc1ef6d00d8f31e45\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\nfunction VoteKnob(props) {\n    const vote= (e,delta) => {\n        e.preventDefault();\n        if (!(props.voteKey in props.interactedWith)) {\n            props.interactedWith[props.voteKey]=0;\n        }\n        props.interactedWith[props.voteKey] += delta;\n        props.dbRef.update({\n            upvotes:props.upvotes+delta\n        })\n    }\n    return (\n        <div className=\"voteKnob\">\n            {\n                <button onClick={(e)=>{vote(e,1)}} disabled={(props.interactedWith[props.voteKey] && props.interactedWith[props.voteKey] >= 1)}>+</button>\n            }\n            <p>{props.upvotes}</p>\n            {\n                <button onClick={(e)=>{vote(e,-1)}} disabled={(props.interactedWith[props.voteKey] && props.interactedWith[props.voteKey] <= -1)}>-</button>\n            }\n        </div>\n    )\n}\n\nexport default VoteKnob;","import React from 'react';\nimport VoteKnob from './VoteKnob';\nimport firebase from './firebase';\n\nfunction QuestionList(props) {\n    return (\n        <div>\n            <form \n                className=\"questionForm\"\n                onSubmit={props.questionSubmit}>\n                <label htmlFor=\"questionInput\">\n                    Enter your question:\n                </label>\n                <input\n                    type=\"text\"\n                    name=\"questionInput\"\n                    id=\"questionInput\"\n                    value={props.questionInput}\n                    onChange={props.inputChange}\n                />\n                <button type=\"submit\">\n                    Ask Question\n                </button>\n            </form>\n            <ul className=\"questionList\">\n            {props.questionList.map((question,index) => {\n                return (\n                <li key={question.key+index} \n                    className={('moved' in question) ? \n                    (question.moved>0 ? \n                        \"moveDown\" :\n                        \"moveUp\")\n                    : null}\n                >\n                    <p\n                        className=\"textContent\"\n                        >\n                        <a\n                            href='#'\n                            onClick={() => props.questionSelect(question.key)}\n                        >\n                            {question.text}\n                        </a>\n                    </p>\n                    <VoteKnob\n                        dbRef={firebase.database().ref(question.key)}\n                        upvotes={question.upvotes}\n                        voteKey={question.key}\n                        interactedWith={props.interactedWith}\n                    />\n                </li>\n                )\n            })}\n            </ul>\n        </div>\n    )\n}\n\nexport default QuestionList;","import React from 'react';\nimport VoteKnob from './VoteKnob';\nimport firebase from './firebase';\n\nclass QuestionThread extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            question: \"\",\n            answers: [],\n            answersSortedKeys: [], // sorted array of keys (used to determine switches)\n            answerInput: \"\",\n            questionRef: {}\n        }\n    }\n\n    componentDidMount() {\n        const questionRef = firebase.database().ref(this.props.selectedQuestion);\n        questionRef.on('value', (snapshot) => {\n            const questionObj = snapshot.val();\n\n            const answers=[];\n            for (let answer in questionObj.answers) {\n\n                answers.push({\n                    answerRef:firebase.database().ref(`${this.props.selectedQuestion}/answers/${answer}`),\n                    answerKey: answer,\n                    text:questionObj.answers[answer].answer,\n                    upvotes:questionObj.answers[answer].upvotes,\n                })\n            }\n\n            answers.sort((a,b) => b.upvotes - a.upvotes);\n\n            const answersSortedKeys = [];\n\n            answers.forEach((answer,index) => {\n              answersSortedKeys.push(answer.answerKey);\n              // question key positon changed\n              const oldIndex = this.state.answersSortedKeys.indexOf(answer.answerKey);\n              if (oldIndex >= 0 && oldIndex !== index) {\n                if (oldIndex < index) {\n                  answer.moved = 1;\n                }\n                else {\n                  answer.moved = -1;\n                }\n              }\n            });\n\n            console.log(answers);\n\n            this.setState({\n                answers: answers,\n                answersSortedKeys: answersSortedKeys,\n                question: questionObj.question\n            })\n        });\n        // save it for later\n        this.setState({\n            questionRef: questionRef,\n        })\n    }\n\n    componentWillUnmount() {\n        this.state.questionRef.off('value');\n    }\n\n    exit = (e) => {\n        e.preventDefault();\n        this.props.returnFunction();\n    }\n\n    inputChange = (event) => {\n        this.setState({\n            answerInput: event.target.value\n        });\n    }\n    \n    answerSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.answerInput !== \"\") {\n            const newAnswer = {\n                answer: this.state.answerInput,\n                upvotes: 0,\n            }\n            this.setState({\n                answerInput: \"\"\n            })\n\n            const answersRef = firebase.database().ref(`${this.props.selectedQuestion}/answers`);\n\n            answersRef.push(newAnswer);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>{this.state.question}</h2>\n                <ul className=\"questionThread\">\n                    {this.state.answers.map((answer,index) => {\n                        return (\n                            <li key={this.props.selectedQuestion+answer.answerKey+index}\n                            className={('moved' in answer) ? \n                                (answer.moved>0 ? \n                                    \"moveDown\" :\n                                    \"moveUp\")\n                                : null}\n                            >\n                                <p className=\"textContent answerText\">{answer.text}</p>\n                                <VoteKnob\n                                    dbRef={answer.answerRef}\n                                    upvotes={answer.upvotes}\n                                    voteKey={this.props.selectedQuestion+answer.answerKey}\n                                    interactedWith={this.props.interactedWith}\n                                />\n                            </li>\n                        )\n                    })}\n                </ul>\n                <form \n                    className=\"answerForm\"\n                    onSubmit={this.answerSubmit}>\n                    <label htmlFor=\"answerInput\">Enter your answer: </label>\n                    <input\n                        type=\"text\"\n                        name=\"answerInput\"\n                        id=\"answerInput\"\n                        value={this.state.answerInput}\n                        onChange={this.inputChange}\n                    />\n                    <button type=\"submit\">Provide answer</button>\n                </form>\n                <button\n                    className=\"returnButton\"\n                    onClick={this.exit}\n                >\n                    Return to questions list\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default QuestionThread;","import React from 'react';\nimport firebase from './firebase';\nimport QuestionList from './QuestionList';\nimport QuestionThread from './QuestionThread';\n\n// function App() {\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      questionList: [], // list of question objects\n      questionSortedKeys: [], // sorted array of keys (used to determine switches)\n      dbRef: {}, // reference for database\n      questionInput: \"\", // current question input\n      selectedQuestion: null, // current selected question\n      interactedWith: {} // object containing items that have been interacted with\n    }\n  }\n\n  componentDidMount() {\n    // get database reference and store it in state for future reference\n    const dbRef = firebase.database().ref();\n    this.setState({\n      dbRef: dbRef\n    });\n\n    dbRef.on('value', (snapshot) => {\n      const questions = snapshot.val();\n\n      const questionList = [];\n      for (let key in questions) {\n        questionList.push({\n          key: key,\n          text: questions[key].question,\n          upvotes: questions[key].upvotes\n        })\n      }\n\n      questionList.sort((a,b) => b.upvotes - a.upvotes);\n\n      const questionSortedKeys = [];\n\n      questionList.forEach((question,index) => {\n        questionSortedKeys.push(question.key);\n        // question key positon changed\n        const oldIndex = this.state.questionSortedKeys.indexOf(question.key);\n        if (oldIndex >= 0 && oldIndex !== index) {\n          if (oldIndex < index) {\n            question.moved = 1;\n          }\n          else {\n            question.moved = -1;\n          }\n        }\n      });      \n\n      this.setState({\n        questionList: questionList,\n        questionSortedKeys: questionSortedKeys\n      })\n\n    });\n  }\n\n  inputChange = (event) => {\n    this.setState({\n      questionInput: event.target.value\n    });\n  }\n\n  questionSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.questionInput !== \"\") {\n      const newQuestion = {\n        question: this.state.questionInput,\n        upvotes: 0,\n        postDate: Date.now(),\n        answers: {}\n      }\n      this.setState({\n        questionInput: \"\"\n      })\n      this.state.dbRef.push(newQuestion);\n    }\n  }\n\n  selectQuestion = (id=null) => {\n    this.setState({\n      selectedQuestion: id\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"wrapper\">\n            <h1>Questionable Questions</h1>\n          </div>\n        </header>\n        <div className=\"wrapper\">\n          <main id=\"main\">\n            {\n              (this.state.selectedQuestion) ? (\n                <QuestionThread\n                  selectedQuestion={this.state.selectedQuestion}\n                  returnFunction={this.selectQuestion}\n                  interactedWith={this.state.interactedWith} \n                />\n              ) :\n              (\n                <QuestionList\n                  questionList={this.state.questionList}\n                  inputChange={this.inputChange}\n                  questionSubmit={this.questionSubmit}\n                  questionInput={this.state.questionInput}\n                  questionSelect={this.selectQuestion}\n                  interactedWith={this.state.interactedWith}\n                />\n              )\n            }\n          </main>\n        </div>\n        <footer>\n          <div className=\"wrapper\">\n            <p>© 2019 Lauren Hetherington</p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}